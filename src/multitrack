#!/usr/bin/env python

############################################################################
# This file is part of Multitrack.                                         #
#                                                                          #
# Copyright (C) 2012 K. Scott Tripp                                        #
#                                                                          #
# AUTHORS:	K. Scott Tripp, <kscott.tripp@gmail.com>                       #
#                                                                          #
# Multitrack is free software: you can redistribute it and/or modify       #
# it under the terms of the GNU General Public License as published by     #
# the Free Software Foundation, either version 3 of the License, or        #
# (at your option) any later version.                                      #
#                                                                          #
# Multitrack is distributed in the hope that it will be useful,            #
# but WITHOUT ANY WARRANTY; without even the implied warranty of           #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
# GNU General Public License for more details.                             #
#                                                                          #
# You should have received a copy of the GNU General Public License        #
# along with Multitrack.  If not, see <http://www.gnu.org/licenses/>.      #
############################################################################

# This script is design to operate in daemon mode (eventually).
# It will always track whatever satellite is overhead.  In the event
# of multiple satellites, it will track whichever pass started first.

import ConfigParser
import subprocess
import os, urllib2, time, calendar, socket
import config
import libTLE
import tempfile

def main():

	### Parameters ########################
	numHours = 24		# interval that this script should be run
	startDelay = 5		# minutes before pass starts
	#configDir = ".config/multitrack"
	#######################################


	# Check for config file, if it doesn't exist create one from the sample
	global configDir
	global tleDir
	configDir = os.getenv("HOME") + "/" + config.configDir
	satDataDir = configDir + "/sats"
	tleDir = configDir + "/tle"
	if os.path.exists(configDir + "/multitrack.conf"):
		print "Using config file " + configDir + "/multitrack.conf"
	else:
		if os.path.exists(configDir + "/multitrack"):
			print "Copying example config file to " + configDir
			os.system("cp /usr/local/share/multitrack/multitrack.conf "+configDir)
		else:
			os.system("mkdir " + configDir)
			os.system("mkdir " + configDir + "/sats")
			os.system("mkdir " + configDir + "/tle")
			print "Copying example config file to " + configDir
			os.system("cp /usr/local/share/multitrack/multitrack.conf "+configDir)
		
		os.system("cp /usr/local/share/multitrack/37853.sat "+satDataDir)
		os.system("cp /usr/local/share/multitrack/37855.sat "+satDataDir)
	
	# Read in satellites to track
	conf = ConfigParser.ConfigParser()
	conf.read(configDir + "/multitrack.conf")
	print conf.sections()
	satSet = conf.items("Sats")

	# Pass options data structure
	class passOptions:
		def __init__(self):
		
			# Hamserv info
			self.host="localhost"
			self.rot_port="4533"
			self.rig_port="4532"
			
			# Satellite info
			self.down_freq="437345000"
			self.satNum=''
			self.satName=''
			
			# Hardware limits
			self.minAz = float(conf.get("Rotator", "minAz"))
			self.maxAz = float(conf.get("Rotator", "maxAz"))
			self.minEl = float(conf.get("Rotator", "minEl"))
			self.maxEl = float(conf.get("Rotator", "maxEl"))
			
			# Miscellaneous
			self.deleteFlag=False

	# Create Satellite ID arrays
	sats = []
	satIDs = []
	for index in range(0,len(satSet)):
		pair = satSet[index]
		sats.append(str.upper(pair[0]))
		if str.upper(pair[1]) is not "":
			satIDs.append(str.upper(pair[1]))
		else:
			satIDs.append(str.upper(pair[0]))
	
	# Fetch and parse TLE File
	# TODO: parse into "sat file"
	# Use config file syntax similar to gpredict satdata
	# Include TLE, tracking command (run_gs_client.sh), and frequency
	os.system("tleupdate -d " + tleDir)

	libTLE.SplitFile(tleDir + "/" + conf.get("TLE", "tle"), 0, tleDir)

	# TODO: now that we have all tles parsed into single tle files,
	# we need the sat file (config parser syntax) to tell us which ones to use.

	# Set up time variables
	time_t = time.time()
	tlocal = time.asctime()

	while True:
		status = open(configDir + "/status.txt", 'w')
		status.write("Satellite".ljust(20) + "elevation\n")
		status.write("=============================\n")

		# Loop through Satellites
		for index in range(0, len(satIDs)):
			sat = satIDs[index]
			satName = sats[index]

			# Call pass prediction
			cmdString =  "satpredict -n"
			cmdString = cmdString + " -t " + tleDir + "/" + sat + ".txt"
			process = subprocess.Popen(cmdString, shell=True, stdout=subprocess.PIPE)
			sat_vector = process.communicate()[0].split(' ')
			statusString = satName.ljust(20) + sat_vector[2] + '\n'
			status.write(statusString)

			# If elevation is above -5 degrees, run pass
			# TODO: Remove magic numbers, put in multitrack.conf!!!
			if float(sat_vector[2]) > -5:
				
				# Get satellite config
				satConf = ConfigParser.ConfigParser()
				satConf.read(satDataDir + "/" + sat + ".sat")
				
				pass_options = passOptions()
				pass_options.down_freq=satConf.get("transponder", "down_freq")
				pass_options.satNum=sat
				pass_options.satName=satName
				
				track_pass(pass_options)

		status.close()
		time.sleep(1)

############################################################################
# track_pass
############################################################################
def track_pass(passOptions):
	
	### Connect to hardware ################################
	BUFFER_SIZE = 256
	rotator = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	rotator.connect((passOptions.host, int(passOptions.rot_port)))
	radio = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	radio.connect((passOptions.host, int(passOptions.rig_port)))

	# Detect passes where the antenna has to flip over
	flipped_flag = detect_flipped_pass(passOptions)
	if flipped_flag:
		print "Keyhole pass detected"
	else:
		print "Normal pass"
	
	# Not all antennas can go to elevation 180
	# Pass will encounter keyhole problem, but will be within limits of
	# the rotator hardware.
	if passOptions.maxEl < 180:
		flipped_flag = 0

	rotator.send("p\n") # initial querry
	
	while True:
		status = open(configDir + "/status.txt", 'w')
		status.write("Tracking " + passOptions.satName + "\n")
		status.write("=======================================\n")

		# Call pass prediction
		cmdString =  "satpredict -n"
		cmdString = cmdString + " -t " + tleDir + "/" + passOptions.satNum + ".txt"
		process = subprocess.Popen(cmdString, shell=True, stdout=subprocess.PIPE)
		sat_vector = process.communicate()[0].split(' ')

		range_rate = float(sat_vector[3])
		f_down = (1-range_rate*1000/config.speed_C)*int(passOptions.down_freq)

		azimuth = float(sat_vector[1])
		elevation = float(sat_vector[2])

		# Update status file
		azString = "Azimuth".ljust(15) + str(azimuth) + '\n'
		elString = "Elevation".ljust(15) + str(elevation) + '\n'
		dfString = "Downlink".ljust(15) + str(f_down) + '\n'
		status.write(azString)
		status.write(elString)
		status.write(dfString)

		# Adjust for rotator azimuth limits
		if flipped_flag:
			azimuth = azimuth + 180
			elevation = 180 - elevation

		if azimuth > 360:
			azimuth = azimuth = 360

		# Read rotator position
		# FIXME: recv() doesn't work like this
		rot_pos = rotator.recv(BUFFER_SIZE)
		status.write("Rotator:".ljust(15) + rot_pos)
		
		# Build rotator command string
		if azimuth <= passOptions.maxAz:
			setAz = int(azimuth)
		else:
			setAz = int(azimuth-360)

		if setAz < 0:
			setAz = '-' + str(abs(setAz)).zfill(3)
		else:
			setAz = str(setAz).zfill(3)

		if elevation < 0:
			setEl = '000'
		elif elevation > int(passOptions.maxEl):
			setEl = str(passOptions.maxEl).zfill(3)
		else:
			setEl = str(int(elevation)).zfill(3)
		rotString = "P " + setAz + ' ' + setEl + "\n"

		# Command and querry rotator
		rotator.send(rotString)
		rotator.send("p\n") #will read on next loop

		
		rigString = "F " + str(int(f_down)) + "\n"
		radio.send(rigString)

		# If elevation is less than -5 degrees, end pass
		# TODO: Remove magic numbers, put in multitrack.conf!!!
		if elevation < -5:
			break

		# Don't overload the hardware!
		time.sleep(1)

	# after pass, park antennas
	if 270 > passOptions.maxAz:
		rotator.send("P -090 000\n")
	else:
		rotator.send("P 270 000\n")
	rotator.close()
	radio.close()

############################################################################
# detect_flipped_pass
############################################################################

# Detect passes that cross rotator azimuth limits.  These require the
# antenna to flip 180 degrees in elevation and then track the reciporical
# azimuth heading

# Returns 1 if the limit is crossed, otherwise returns 0

def detect_flipped_pass(passOptions):
	
	t_index = int(time.time())
	flipped_flag = 0
	rot_dir = 2	# cannot be zero, 1 or -1

	# Call pass prediction
	cmdString =  "satpredict -n"
	cmdString = cmdString + " -t " + tleDir + "/" + passOptions.satNum +".txt "
	cmdString = cmdString + " -a " + str(t_index)
	cmdString = cmdString + " -l " + str(t_index) + " -n"
	process = subprocess.Popen(cmdString, shell=True, stdout=subprocess.PIPE)
	sat_vector = process.communicate()[0].split(' ')

	azimuth = float(sat_vector[1])
	elevation = float(sat_vector[2])

	# Adjust for rotator coordinate system
	rot_az = azimuth - passOptions.minAz

	t_index += 1
	
	while True:
	
		# Save last rotator heading and direction
		rot_az_old = rot_az
		rot_dir_old = rot_dir

		# Call pass prediction
		cmdString =  "satpredict -n"
		cmdString = cmdString + " -t " + tleDir + "/" + passOptions.satNum +".txt "
		cmdString = cmdString + " -a " + str(t_index)
		cmdString = cmdString + " -l " + str(t_index) + " -n"
		process = subprocess.Popen(cmdString, shell=True, stdout=subprocess.PIPE)
		sat_vector = process.communicate()[0].split(' ')

		azimuth = float(sat_vector[1])
		elevation = float(sat_vector[2])

		# Adjust for rotator coordinate system
		rot_az = azimuth - passOptions.minAz
		
		if rot_az > 360:
			rot_az = rot_az - 360

		# Find direction of rotation
		d_rotaz = rot_az - rot_az_old
		rot_dir = d_rotaz / abs(d_rotaz)

		if rot_dir == -1 * rot_dir_old:
			flipped_flag = 1
			break

		# If elevation is less than -5 degrees, end pass
		# TODO: Remove magic numbers, put in multitrack.conf!!!
		if elevation < -5:
			break

		# Next time step.  High precision is not needed.
		t_index += 20
	
	return flipped_flag


############################################################################
# Initialize Multitrack
############################################################################
if __name__=="__main__":
	main()
